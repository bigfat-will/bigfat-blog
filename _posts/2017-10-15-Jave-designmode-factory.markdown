---
layout:     post
title:      "Java设计模式/工厂模式"
subtitle:   ""
date:       2017-10-15
author:     "Will"
header-img: "img/java/java.png"
catalog: true
tags:
    - Java设计模式
---

> “walk beside you ”

## 前言

    **工厂模式（Factory Pattern）** 是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。

---

## 正文

#### 定义

定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。

#### 优点

* 一个调用者想创建一个对象，只要知道其名称就可以了。
* 扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
* 屏蔽产品的具体实现，调用者只关心产品的接口。

#### 缺点

 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。

#### 使用场景

* 日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 
* 数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。
* 设计一个连接服务器的框架，需要三个协议，"POP3"、"IMAP"、"HTTP"，可以把这三个作为产品类，共同实现一个接口。

## 后记

工厂模式是项目中非常常见的模式，使得代码扩展性，易用性提高。作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。
